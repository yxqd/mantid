// Mantid Repository : https://github.com/mantidproject/mantid
//
// Copyright &copy; 2018 ISIS Rutherford Appleton Laboratory UKRI,
//     NScD Oak Ridge National Laboratory, European Spallation Source
//     & Institut Laue - Langevin
// SPDX - License - Identifier: GPL - 3.0 +
/*****************************************************************************************/
/********** PLEASE NOTE! THIS FILE WAS AUTO-GENERATED FROM CMAKE.
 * ***********************/
/********** Source = kernel.cpp.in
 * *******************************************************/
/*****************************************************************************************/
#include <boost/python/def.hpp>
#include <boost/python/docstring_options.hpp>
#include <boost/python/module.hpp>
#include <boost/python/type_id.hpp>

#include "MantidKernel/MantidVersion.h"
#include "MantidPythonInterface/core/NDArray.h"
#include "MantidPythonInterface/kernel/Registry/TypeRegistry.h"
#include "MantidPythonInterface/kernel/kernel.h"

// See
// http://docs.scipy.org/doc/numpy/reference/c-api.array.html#PY_ARRAY_UNIQUE_SYMBOL
#define PY_ARRAY_UNIQUE_SYMBOL KERNEL_ARRAY_API
#include <numpy/arrayobject.h>

// See comment in kernel.h
#ifdef _WIN32
void kernel_dll_import_numpy_capi_for_unittest() { _import_array(); }
#endif

using boost::python::def;
using boost::python::type_id;
namespace converter = boost::python::converter;

// Forward declare
@EXPORT_DECLARE@

#if PY_VERSION_HEX < 0x03000000
    /**
     * Adds a from_python converter to converter unicode strings to std::string
     * by encoding them in utf-8 if possible. Adapted from
     * https://www.boost.org/doc/libs/1_68_0/libs/python/doc/html/faq/how_can_i_automatically_convert_.html
     */
struct from_unicode_py2 {
  from_unicode_py2() {
    converter::registry::push_back(&convertible, &construct,
                                   type_id<std::string>());
  }
  static void *convertible(PyObject *obj_ptr) {
    return (PyUnicode_Check(obj_ptr)) ? obj_ptr : 0;
  }
  static void construct(PyObject *obj_ptr,
                        converter::rvalue_from_python_stage1_data *data) {
    PyObject *pyutf8 = PyUnicode_AsUTF8String(obj_ptr);
    if (pyutf8 == 0)
      boost::python::throw_error_already_set();
    const char *value = PyString_AsString(pyutf8);
    if (value == 0)
      boost::python::throw_error_already_set();
    Py_DECREF(pyutf8);
    using rvalue_from_python_std_string = converter::rvalue_from_python_storage<std::string>;
    void *storage = reinterpret_cast<rvalue_from_python_std_string*>(data)->storage.bytes;
    new (storage) std::string(value);
    data->convertible = storage;
  }
};
#endif

BOOST_PYTHON_MODULE(_kernel) {
  // Doc string options - User defined, python arguments, C++ call signatures
  boost::python::docstring_options docstrings(true, true, false);
  // Import numpy for the core DLL
  Mantid::PythonInterface::importNumpy();
  // Import numpy for this DLL
  _import_array();

  def("version_str", &Mantid::Kernel::MantidVersion::version,
      "Returns the Mantid version string in the form \"major.minor.patch\"");
  def("release_notes_url", &Mantid::Kernel::MantidVersion::releaseNotes,
      "Returns the url to the most applicable release notes");
  def("revision", &Mantid::Kernel::MantidVersion::revision,
      "Returns the abbreviated SHA-1 of the last commit");
  def("revision_full", &Mantid::Kernel::MantidVersion::revisionFull,
      "Returns the full SHA-1 of the last commit");
  def("release_date", &Mantid::Kernel::MantidVersion::releaseDate,
      "Returns the date of the last commit");
  def("doi", &Mantid::Kernel::MantidVersion::doi,
      "Returns the DOI for this release of Mantid");
  def("paper_citation", &Mantid::Kernel::MantidVersion::paperCitation,
      "Returns The citation for the Mantid paper");

#if PY_VERSION_HEX < 0x03000000
  // accept unicode strings wherever we see std::string (as long as they can be
  // encoded in utf8)
  from_unicode_py2();
#endif
  Mantid::PythonInterface::Registry::TypeRegistry::registerBuiltins();

  @EXPORT_FUNCTIONS@
}
